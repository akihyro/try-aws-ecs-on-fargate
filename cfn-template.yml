AWSTemplateFormatVersion: 2010-09-09
Description: try-aws-ecs-on-fargate
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: try-aws-ecs-on-fargate
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: try-aws-ecs-on-fargate
  NginxTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: try-aws-ecs-on-fargate
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: try-aws-ecs-on-fargate-nginx
          Image: nginx:1.17
          PortMappings:
            - Protocol: tcp
              ContainerPort: 80
      Tags:
        - Key: Name
          Value: try-aws-ecs-on-fargate-nginx
  NginxService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: try-aws-ecs-on-fargate-nginx
      Cluster: !Ref Cluster
      TaskDefinition: !Ref NginxTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 2
      LoadBalancers:
        - ContainerName: try-aws-ecs-on-fargate-nginx
          ContainerPort: 80
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref SubnetIds
          SecurityGroups:
            - !Sub ${NginxServiceSecurityGroup.GroupId}
      Tags:
        - Key: Name
          Value: try-aws-ecs-on-fargate-nginx
  NginxServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: try-aws-ecs-on-fargate-nginx-service
      GroupDescription: try-aws-ecs-on-fargate-nginx-service
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Sub ${LoadBalancerSecurityGroup.GroupId}
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: try-aws-ecs-on-fargate
      Scheme: internet-facing
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Sub ${LoadBalancerSecurityGroup.GroupId}
      Tags:
        - Key: Name
          Value: try-aws-ecs-on-fargate
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: try-aws-ecs-on-fargate-lb
      GroupDescription: try-aws-ecs-on-fargate-lb
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - TargetGroupArn: !Ref LoadBalancerTargetGroup
          Type: forward
  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: try-aws-ecs-on-fargate
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 80
      TargetType: ip
      Tags:
        - Key: Name
          Value: try-aws-ecs-on-fargate
